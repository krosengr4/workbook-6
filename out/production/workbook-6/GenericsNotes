----------------GENERICS------------------------

* - We use generics for when we need the same functionality,
    but with different data types.

- generic = a way to define reusable functionality without
a predefined data type.
- Since we don't know the data type, we replace it with <T>

- Can be applied to classes or methods

- When applied to a class, generics allow you to generalize
  the data type of member variable(s)
   * The type of the variable(s) are usually specified using a letter like T,
     and then replaced with an actual data type (Integer, String, com.pluralsight.streams.Person, etc.)
     when the object is instantiated.

- When applied to a method, generics allow you to
  generalize the data type of parameters and return types
- You can also use generic methods in Standard Java classes
- If you use the generic return, you must surround it with <  >.

- The purpose of a generic class is to create common functionality, however,
sometimes you want to perform specific methods for a specific variable
(ex class: Pair<T>, type: Pair<Musician>, method: duet.perform())
the problem with this is that if we have Pair<Integer> = new Pair(1, 2), these integers
cannot perform and the code would throw an exception.

Solution:
- We can force Generic classes to recognize methods
    * We can specify which classes or interfaces our Generics will allow
    * This is done by limiting the definition of T
    * ex: <T extends Musician> ---> now a Duet can only be created for classes which extend Musician

*** Java does not support primitive types with generics***
       this means you have to use one of Java's wrappers:
           - Integer for int
           - Double for double
           - Character for char
           - Boolean for bool



